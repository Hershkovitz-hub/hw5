import pathlib
from pathlib import Path
from typing import Union, Tuple
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import re


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        """Initiate QuestionnaireAnalysis class with following arguments.
        Arguments:
            data_fname {Union[pathlib.Path, str]} -- [path to .json file ocntaining subjects' data]
        """
        self.data_fname = Path(data_fname)
        if not self.data_fname.is_file():
            raise ValueError

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
            """
        self.read_data()
        bin_edges = np.arange(0, 110, 10)
        ax = self.data.hist(column="age", bins=bin_edges)
        hist, bins = np.histogram(self.data.age.dropna().values, bins=bin_edges)
        plt.show()
        return (hist, bins)

    def check_email(self, email: str):
        # regex = "^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w)+$"
        regex = r"[^@]+@[^@]+\.[^@]+"
        flag = False
        if re.search(regex, email):
            flag = True
        return flag

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

            Returns
            -------
            df : pd.DataFrame
            A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
            the (ordinal) index after a reset.
        """
        self.read_data()
        df = self.data.copy()
        for i in df.index:
            if not self.check_email(df.email[i]):
                df.drop(i, inplace=True)
        df = df.reset_index(drop=True)
        return df

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

    Returns
    -------
    df : pd.DataFrame
    The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
        Row indices of the students that their new grades were generated
        """
        df = self.data.copy()
        scores_df = df.loc[:, "q1":"q5"]
        arr = scores_df.index[scores_df.isnull().any(1)]
        scores_df = scores_df.T.fillna(scores_df.mean(axis=1)).T
        df.loc[:, "q1":"q5"] = scores_df
        return df, arr

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        self.read_data()
        df = self.data.copy()
        scores_df = df.loc[:, "q1":"q5"]
        scores_df["score"] = scores_df.mean(axis=1).apply(np.floor)
        scores_df[scores_df.isnull().sum(axis=1) > maximal_nans_per_sub] = np.nan
        scores = pd.Series(scores_df.score.values, dtype="UInt8")
        df["score"] = scores
        return df

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

    Returns
    -------
    pd.DataFrame
        A DataFrame with a MultiIndex containing the gender and whether the subject is above
        40 years of age, and the average score in each of the five questions.
    """
        self.read_data()
        df, arr = self.fill_na_with_mean()
        rel_df = df.drop("id", axis=1)
        rel_df["index"] = rel_df.index
        below_40_df = rel_df.groupby(
            ["index", "gender", "age", lambda x: rel_df["age"][x] < 40]
        ).mean()
        return below_40_df
